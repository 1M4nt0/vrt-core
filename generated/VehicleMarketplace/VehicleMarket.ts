// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Cancel extends ethereum.Event {
  get params(): Cancel__Params {
    return new Cancel__Params(this);
  }
}

export class Cancel__Params {
  _event: Cancel;

  constructor(event: Cancel) {
    this._event = event;
  }

  get ticketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OnSale extends ethereum.Event {
  get params(): OnSale__Params {
    return new OnSale__Params(this);
  }
}

export class OnSale__Params {
  _event: OnSale;

  constructor(event: OnSale) {
    this._event = event;
  }

  get ticketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenContract(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Sold extends ethereum.Event {
  get params(): Sold__Params {
    return new Sold__Params(this);
  }
}

export class Sold__Params {
  _event: Sold;

  constructor(event: Sold) {
    this._event = event;
  }

  get ticketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get buyer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenContract(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class VehicleMarket__getTokenSaleTicketResultValue0Struct extends ethereum.Tuple {
  get seller(): Address {
    return this[0].toAddress();
  }

  get tokenContract(): Address {
    return this[1].toAddress();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get price(): BigInt {
    return this[3].toBigInt();
  }

  get status(): i32 {
    return this[4].toI32();
  }
}

export class VehicleMarket extends ethereum.SmartContract {
  static bind(address: Address): VehicleMarket {
    return new VehicleMarket("VehicleMarket", address);
  }

  getTokenSaleTicket(
    tokenId: BigInt
  ): VehicleMarket__getTokenSaleTicketResultValue0Struct {
    let result = super.call(
      "getTokenSaleTicket",
      "getTokenSaleTicket(uint256):((address,address,uint256,uint256,uint8))",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return changetype<VehicleMarket__getTokenSaleTicketResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getTokenSaleTicket(
    tokenId: BigInt
  ): ethereum.CallResult<VehicleMarket__getTokenSaleTicketResultValue0Struct> {
    let result = super.tryCall(
      "getTokenSaleTicket",
      "getTokenSaleTicket(uint256):((address,address,uint256,uint256,uint8))",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<VehicleMarket__getTokenSaleTicketResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  isTokenOnSale(tokenId: BigInt): boolean {
    let result = super.call("isTokenOnSale", "isTokenOnSale(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toBoolean();
  }

  try_isTokenOnSale(tokenId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isTokenOnSale",
      "isTokenOnSale(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  listedItemsCount(): BigInt {
    let result = super.call(
      "listedItemsCount",
      "listedItemsCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_listedItemsCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "listedItemsCount",
      "listedItemsCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get VRTAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BuyNftCall extends ethereum.Call {
  get inputs(): BuyNftCall__Inputs {
    return new BuyNftCall__Inputs(this);
  }

  get outputs(): BuyNftCall__Outputs {
    return new BuyNftCall__Outputs(this);
  }
}

export class BuyNftCall__Inputs {
  _call: BuyNftCall;

  constructor(call: BuyNftCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BuyNftCall__Outputs {
  _call: BuyNftCall;

  constructor(call: BuyNftCall) {
    this._call = call;
  }
}

export class CancelSaleCall extends ethereum.Call {
  get inputs(): CancelSaleCall__Inputs {
    return new CancelSaleCall__Inputs(this);
  }

  get outputs(): CancelSaleCall__Outputs {
    return new CancelSaleCall__Outputs(this);
  }
}

export class CancelSaleCall__Inputs {
  _call: CancelSaleCall;

  constructor(call: CancelSaleCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelSaleCall__Outputs {
  _call: CancelSaleCall;

  constructor(call: CancelSaleCall) {
    this._call = call;
  }
}

export class PlaceNftOnSaleCall extends ethereum.Call {
  get inputs(): PlaceNftOnSaleCall__Inputs {
    return new PlaceNftOnSaleCall__Inputs(this);
  }

  get outputs(): PlaceNftOnSaleCall__Outputs {
    return new PlaceNftOnSaleCall__Outputs(this);
  }
}

export class PlaceNftOnSaleCall__Inputs {
  _call: PlaceNftOnSaleCall;

  constructor(call: PlaceNftOnSaleCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get price(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class PlaceNftOnSaleCall__Outputs {
  _call: PlaceNftOnSaleCall;

  constructor(call: PlaceNftOnSaleCall) {
    this._call = call;
  }
}
